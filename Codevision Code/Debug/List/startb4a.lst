
AVRASM ver. 2.1.30  C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm Thu Jan 05 22:29:04 2023

C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1093): warning: Register r10 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1095): warning: Register r12 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1097): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _PIR_flg=R8
                 	.DEF _PIR_flg_msb=R9
                 	.DEF _magnet_flg=R10
                 	.DEF _magnet_flg_msb=R11
                 	.DEF _active=R12
                 	.DEF _active_msb=R13
                 	.DEF _r=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00a6 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 00d3 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 00d7 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00d5 	JMP  _ext_int2_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
000038 0000      	.DB  0x0,0x0
                 
                 _0x3:
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1145): warning: .cseg .db misalignment - padding zero byte
000039 000d      	.DB  0xD
                 _0x4:
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1147): warning: .cseg .db misalignment - padding zero byte
00003a 0022      	.DB  0x22
                 _0x5:
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1149): warning: .cseg .db misalignment - padding zero byte
00003b 0001      	.DB  0x1
                 _0x0:
00003c 5441
00003d 3045
00003e 4100
00003f 2b54      	.DB  0x41,0x54,0x45,0x30,0x0,0x41,0x54,0x2B
000040 4153
000041 4250
000042 3d52
000043 2c33      	.DB  0x53,0x41,0x50,0x42,0x52,0x3D,0x33,0x2C
000044 2c31
000045 6f43
000046 746e
000047 7079      	.DB  0x31,0x2C,0x43,0x6F,0x6E,0x74,0x79,0x70
000048 2c65
000049 5047
00004a 5352
00004b 4100      	.DB  0x65,0x2C,0x47,0x50,0x52,0x53,0x0,0x41
00004c 2b54
00004d 4153
00004e 4250
00004f 3d52      	.DB  0x54,0x2B,0x53,0x41,0x50,0x42,0x52,0x3D
000050 2c33
000051 2c31
000052 5041
000053 2c4e      	.DB  0x33,0x2C,0x31,0x2C,0x41,0x50,0x4E,0x2C
000054 746d
000055 696e
000056 6172
000057 636e      	.DB  0x6D,0x74,0x6E,0x69,0x72,0x61,0x6E,0x63
000058 6c65
000059 006c
00005a 5441
00005b 532b      	.DB  0x65,0x6C,0x6C,0x0,0x41,0x54,0x2B,0x53
00005c 5041
00005d 5242
00005e 313d
00005f 312c      	.DB  0x41,0x50,0x42,0x52,0x3D,0x31,0x2C,0x31
000060 4100
000061 2b54
000062 5448
000063 5054      	.DB  0x0,0x41,0x54,0x2B,0x48,0x54,0x54,0x50
000064 4e49
000065 5449
000066 4100
000067 2b54      	.DB  0x49,0x4E,0x49,0x54,0x0,0x41,0x54,0x2B
000068 5448
000069 5054
00006a 4150
00006b 4152      	.DB  0x48,0x54,0x54,0x50,0x50,0x41,0x52,0x41
00006c 433d
00006d 4449
00006e 312c
00006f 4100      	.DB  0x3D,0x43,0x49,0x44,0x2C,0x31,0x0,0x41
000070 2b54
000071 5448
000072 5054
000073 4150      	.DB  0x54,0x2B,0x48,0x54,0x54,0x50,0x50,0x41
000074 4152
000075 553d
000076 4c52
000077 312c      	.DB  0x52,0x41,0x3D,0x55,0x52,0x4C,0x2C,0x31
000078 3539
000079 312e
00007a 3238
00007b 332e      	.DB  0x39,0x35,0x2E,0x31,0x38,0x32,0x2E,0x33
00007c 2e38
00007d 3531
00007e 2f31
00007f 6f70      	.DB  0x38,0x2E,0x31,0x35,0x31,0x2F,0x70,0x6F
000080 6c6c
000081 2f73
000082 616c
000083 7473      	.DB  0x6C,0x6C,0x73,0x2F,0x6C,0x61,0x73,0x74
000084 735f
000085 6174
000086 6574
000087 4100      	.DB  0x5F,0x73,0x74,0x61,0x74,0x65,0x0,0x41
000088 4454
000089 392b
00008a 3938
00008b 3332      	.DB  0x54,0x44,0x2B,0x39,0x38,0x39,0x32,0x33
00008c 3431
00008d 3937
00008e 3039
00008f 3b38      	.DB  0x31,0x34,0x37,0x39,0x39,0x30,0x38,0x3B
000090 4100
000091 2b54
000092 5448
000093 5054      	.DB  0x0,0x41,0x54,0x2B,0x48,0x54,0x54,0x50
000094 4341
000095 4954
000096 4e4f
000097 303d      	.DB  0x41,0x43,0x54,0x49,0x4F,0x4E,0x3D,0x30
000098 4100
000099 2b54
00009a 5448
00009b 5054      	.DB  0x0,0x41,0x54,0x2B,0x48,0x54,0x54,0x50
00009c 4552
00009d 4441
C:\Users\Amiri\Documents\semester7\Embedded\project\2_implementation\test_rx_tx_sim800\Debug\List\startb4a.asm(1175): warning: .cseg .db misalignment - padding zero byte
00009e 0000      	.DB  0x52,0x45,0x41,0x44,0x0
                 
                 __GLOBAL_INI_TBL:
00009f 0001      	.DW  0x01
0000a0 0002      	.DW  0x02
0000a1 0066      	.DW  __REG_BIT_VARS*2
                 
0000a2 000a      	.DW  0x0A
0000a3 0004      	.DW  0x04
0000a4 0068      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
0000a5 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000a6 94f8      	CLI
0000a7 27ee      	CLR  R30
0000a8 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a9 e0f1      	LDI  R31,1
0000aa bffb      	OUT  GICR,R31
0000ab bfeb      	OUT  GICR,R30
0000ac bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000ad e08d      	LDI  R24,(14-2)+1
0000ae e0a2      	LDI  R26,2
0000af 27bb      	CLR  R27
                 __CLEAR_REG:
0000b0 93ed      	ST   X+,R30
0000b1 958a      	DEC  R24
0000b2 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000b3 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000b4 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000b5 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000b6 93ed      	ST   X+,R30
0000b7 9701      	SBIW R24,1
0000b8 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000b9 e3ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000ba e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000bb 9185      	LPM  R24,Z+
0000bc 9195      	LPM  R25,Z+
0000bd 9700      	SBIW R24,0
0000be f061      	BREQ __GLOBAL_INI_END
0000bf 91a5      	LPM  R26,Z+
0000c0 91b5      	LPM  R27,Z+
0000c1 9005      	LPM  R0,Z+
0000c2 9015      	LPM  R1,Z+
0000c3 01bf      	MOVW R22,R30
0000c4 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000c5 9005      	LPM  R0,Z+
0000c6 920d      	ST   X+,R0
0000c7 9701      	SBIW R24,1
0000c8 f7e1      	BRNE __GLOBAL_INI_LOOP
0000c9 01fb      	MOVW R30,R22
0000ca cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000cb e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000cc bfed      	OUT  SPL,R30
0000cd e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ce bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000cf e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000d0 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000d1 940c 0100 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 512
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 512
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;int PIR_flg = 0;
                 ;int magnet_flg = 0;
                 ;int active=0;
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0026 {
                 
                 	.CSEG
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
                 ; 0000 0027     magnet_flg = active;
0000d3 0156      	MOVW R10,R12
                 ; 0000 0028 }
0000d4 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 2 service routine
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 002C {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
                 ; 0000 002D     PIR_flg = active;
0000d5 0146      	MOVW R8,R12
                 ; 0000 002E }
0000d6 9518      	RETI
                 ; .FEND
                 ;
                 ;// USART Receiver interrupt service routine
                 ;const char enter=13,double_quote=34;
                 
                 	.DSEG
                 ;char receive[128];
                 ;char r;
                 ;char pre;
                 ;int counter,i;
                 ;int m=1;
                 ;int n=0;
                 ;
                 ;interrupt [USART_RXC] void usart_rx_isr(void) {
                 ; 0000 0039 interrupt [12] void usart_rx_isr(void) {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0000d7 93aa      	ST   -Y,R26
0000d8 93ea      	ST   -Y,R30
0000d9 93fa      	ST   -Y,R31
0000da b7ef      	IN   R30,SREG
0000db 93ea      	ST   -Y,R30
                 ; 0000 003A     char status,data;
                 ; 0000 003B     status=UCSRA;
0000dc 931a      	ST   -Y,R17
0000dd 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000de b11b      	IN   R17,11
                 ; 0000 003C     data=UDR;
0000df b10c      	IN   R16,12
                 ; 0000 003D     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0) {
0000e0 2fe1      	MOV  R30,R17
0000e1 71ec      	ANDI R30,LOW(0x1C)
0000e2 f499      	BRNE _0x6
                 ; 0000 003E         if (data == 35 && pre == 35) {
0000e3 3203      	CPI  R16,35
0000e4 f421      	BRNE _0x8
0000e5 91a0 0168 	LDS  R26,_pre
0000e7 32a3      	CPI  R26,LOW(0x23)
0000e8 f009      	BREQ _0x9
                 _0x8:
0000e9 c003      	RJMP _0x7
                 _0x9:
                 ; 0000 003F             active = 1;
0000ea e0e1      	LDI  R30,LOW(1)
0000eb e0f0      	LDI  R31,HIGH(1)
0000ec 016f      	MOVW R12,R30
                 ; 0000 0040         }
                 ; 0000 0041         if (data == 42 && pre == 42) {
                 _0x7:
0000ed 320a      	CPI  R16,42
0000ee f421      	BRNE _0xB
0000ef 91a0 0168 	LDS  R26,_pre
0000f1 32aa      	CPI  R26,LOW(0x2A)
0000f2 f009      	BREQ _0xC
                 _0xB:
0000f3 c002      	RJMP _0xA
                 _0xC:
                 ; 0000 0042             active = 0;
0000f4 24cc      	CLR  R12
0000f5 24dd      	CLR  R13
                 ; 0000 0043         }
                 ; 0000 0044     }
                 _0xA:
                 ; 0000 0045     pre = data;
                 _0x6:
0000f6 9300 0168 	STS  _pre,R16
                 ; 0000 0046 }
0000f8 9109      	LD   R16,Y+
0000f9 9119      	LD   R17,Y+
0000fa 91e9      	LD   R30,Y+
0000fb bfef      	OUT  SREG,R30
0000fc 91f9      	LD   R31,Y+
0000fd 91e9      	LD   R30,Y+
0000fe 91a9      	LD   R26,Y+
0000ff 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 004D {
                 ; 0000 004E char data;
                 ; 0000 004F while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0050 data=rx_buffer[rx_rd_index++];
                 ; 0000 0051 #if RX_BUFFER_SIZE != 256
                 ; 0000 0052 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 0053 #endif
                 ; 0000 0054 #asm("cli")
                 ; 0000 0055 --rx_counter;
                 ; 0000 0056 #asm("sei")
                 ; 0000 0057 return data;
                 ; 0000 0058 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0060 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0061 int z=0;
                 ; 0000 0062 char ctrlz=26;
                 ; 0000 0063 int j=0;
                 ; 0000 0064 int ok = 0;
                 ; 0000 0065 // Declare your local variables here
                 ; 0000 0066 
                 ; 0000 0067 // Input/Output Ports initialization
                 ; 0000 0068 // Port A initialization
                 ; 0000 0069 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006A DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000100 9722      	SBIW R28,2
000101 e0e0      	LDI  R30,LOW(0)
000102 83e8      	ST   Y,R30
000103 83e9      	STD  Y+1,R30
                 ;	z -> R16,R17
                 ;	ctrlz -> R19
                 ;	j -> R20,R21
                 ;	ok -> Y+0
                +
000104 e000     +LDI R16 , LOW ( 0 )
000105 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000106 e13a      	LDI  R19,26
                +
000107 e040     +LDI R20 , LOW ( 0 )
000108 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000109 bbea      	OUT  0x1A,R30
                 ; 0000 006B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 006C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00010a bbeb      	OUT  0x1B,R30
                 ; 0000 006D 
                 ; 0000 006E // Port B initialization
                 ; 0000 006F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0070 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00010b e0e8      	LDI  R30,LOW(8)
00010c bbe7      	OUT  0x17,R30
                 ; 0000 0071 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=1 Bit2=T Bit1=T Bit0=T
                 ; 0000 0072 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00010d bbe8      	OUT  0x18,R30
                 ; 0000 0073 
                 ; 0000 0074 // Port C initialization
                 ; 0000 0075 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0076 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00010e efef      	LDI  R30,LOW(255)
00010f bbe4      	OUT  0x14,R30
                 ; 0000 0077 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0078 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000110 e0e0      	LDI  R30,LOW(0)
000111 bbe5      	OUT  0x15,R30
                 ; 0000 0079 
                 ; 0000 007A // Port D initialization
                 ; 0000 007B // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007C DDRD=(1<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000112 eae0      	LDI  R30,LOW(160)
000113 bbe1      	OUT  0x11,R30
                 ; 0000 007D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=P
                 ; 0000 007E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (1<<PORTD0);
000114 e0e1      	LDI  R30,LOW(1)
000115 bbe2      	OUT  0x12,R30
                 ; 0000 007F 
                 ; 0000 0080 // Timer/Counter 0 initialization
                 ; 0000 0081 // Clock source: System Clock
                 ; 0000 0082 // Clock value: Timer 0 Stopped
                 ; 0000 0083 // Mode: Normal top=0xFF
                 ; 0000 0084 // OC0 output: Disconnected
                 ; 0000 0085 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000116 e0e0      	LDI  R30,LOW(0)
000117 bfe3      	OUT  0x33,R30
                 ; 0000 0086 TCNT0=0x00;
000118 bfe2      	OUT  0x32,R30
                 ; 0000 0087 OCR0=0x00;
000119 bfec      	OUT  0x3C,R30
                 ; 0000 0088 
                 ; 0000 0089 // Timer/Counter 1 initialization
                 ; 0000 008A // Clock source: System Clock
                 ; 0000 008B // Clock value: Timer1 Stopped
                 ; 0000 008C // Mode: Normal top=0xFFFF
                 ; 0000 008D // OC1A output: Disconnected
                 ; 0000 008E // OC1B output: Disconnected
                 ; 0000 008F // Noise Canceler: Off
                 ; 0000 0090 // Input Capture on Falling Edge
                 ; 0000 0091 // Timer1 Overflow Interrupt: Off
                 ; 0000 0092 // Input Capture Interrupt: Off
                 ; 0000 0093 // Compare A Match Interrupt: Off
                 ; 0000 0094 // Compare B Match Interrupt: Off
                 ; 0000 0095 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00011a bdef      	OUT  0x2F,R30
                 ; 0000 0096 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00011b bdee      	OUT  0x2E,R30
                 ; 0000 0097 TCNT1H=0x00;
00011c bded      	OUT  0x2D,R30
                 ; 0000 0098 TCNT1L=0x00;
00011d bdec      	OUT  0x2C,R30
                 ; 0000 0099 ICR1H=0x00;
00011e bde7      	OUT  0x27,R30
                 ; 0000 009A ICR1L=0x00;
00011f bde6      	OUT  0x26,R30
                 ; 0000 009B OCR1AH=0x00;
000120 bdeb      	OUT  0x2B,R30
                 ; 0000 009C OCR1AL=0x00;
000121 bdea      	OUT  0x2A,R30
                 ; 0000 009D OCR1BH=0x00;
000122 bde9      	OUT  0x29,R30
                 ; 0000 009E OCR1BL=0x00;
000123 bde8      	OUT  0x28,R30
                 ; 0000 009F 
                 ; 0000 00A0 // Timer/Counter 2 initialization
                 ; 0000 00A1 // Clock source: System Clock
                 ; 0000 00A2 // Clock value: Timer2 Stopped
                 ; 0000 00A3 // Mode: Normal top=0xFF
                 ; 0000 00A4 // OC2 output: Disconnected
                 ; 0000 00A5 ASSR=0<<AS2;
000124 bde2      	OUT  0x22,R30
                 ; 0000 00A6 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000125 bde5      	OUT  0x25,R30
                 ; 0000 00A7 TCNT2=0x00;
000126 bde4      	OUT  0x24,R30
                 ; 0000 00A8 OCR2=0x00;
000127 bde3      	OUT  0x23,R30
                 ; 0000 00A9 
                 ; 0000 00AA // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00AB TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000128 bfe9      	OUT  0x39,R30
                 ; 0000 00AC 
                 ; 0000 00AD // External Interrupt(s) initialization
                 ; 0000 00AE // INT0: Off
                 ; 0000 00AF // INT1: On
                 ; 0000 00B0 // INT1 Mode: Falling Edge
                 ; 0000 00B1 // INT2: On
                 ; 0000 00B2 // INT2 Mode: Rising Edge
                 ; 0000 00B3 GICR|=(1<<INT1) | (0<<INT0) | (1<<INT2);
000129 b7eb      	IN   R30,0x3B
00012a 6ae0      	ORI  R30,LOW(0xA0)
00012b bfeb      	OUT  0x3B,R30
                 ; 0000 00B4 MCUCR=(1<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00012c e0e8      	LDI  R30,LOW(8)
00012d bfe5      	OUT  0x35,R30
                 ; 0000 00B5 MCUCSR=(1<<ISC2);
00012e e4e0      	LDI  R30,LOW(64)
00012f bfe4      	OUT  0x34,R30
                 ; 0000 00B6 GIFR=(1<<INTF1) | (0<<INTF0) | (1<<INTF2);
000130 eae0      	LDI  R30,LOW(160)
000131 bfea      	OUT  0x3A,R30
                 ; 0000 00B7 
                 ; 0000 00B8 // USART initialization
                 ; 0000 00B9 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00BA // USART Receiver: On
                 ; 0000 00BB // USART Transmitter: On
                 ; 0000 00BC // USART Mode: Asynchronous
                 ; 0000 00BD // USART Baud Rate: 9600
                 ; 0000 00BE UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
000132 e0e0      	LDI  R30,LOW(0)
000133 b9eb      	OUT  0xB,R30
                 ; 0000 00BF UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000134 e9e8      	LDI  R30,LOW(152)
000135 b9ea      	OUT  0xA,R30
                 ; 0000 00C0 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
000136 e8e6      	LDI  R30,LOW(134)
000137 bde0      	OUT  0x20,R30
                 ; 0000 00C1 UBRRH=0x00;
000138 e0e0      	LDI  R30,LOW(0)
000139 bde0      	OUT  0x20,R30
                 ; 0000 00C2 UBRRL=0x19;
00013a e1e9      	LDI  R30,LOW(25)
00013b b9e9      	OUT  0x9,R30
                 ; 0000 00C3 
                 ; 0000 00C4 // Analog Comparator initialization
                 ; 0000 00C5 // Analog Comparator: Off
                 ; 0000 00C6 // The Analog Comparator's positive input is
                 ; 0000 00C7 // connected to the AIN0 pin
                 ; 0000 00C8 // The Analog Comparator's negative input is
                 ; 0000 00C9 // connected to the AIN1 pin
                 ; 0000 00CA ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00013c e8e0      	LDI  R30,LOW(128)
00013d b9e8      	OUT  0x8,R30
                 ; 0000 00CB SFIOR=(0<<ACME);
00013e e0e0      	LDI  R30,LOW(0)
00013f bfe0      	OUT  0x30,R30
                 ; 0000 00CC 
                 ; 0000 00CD // ADC initialization
                 ; 0000 00CE // ADC disabled
                 ; 0000 00CF ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000140 b9e6      	OUT  0x6,R30
                 ; 0000 00D0 
                 ; 0000 00D1 // SPI initialization
                 ; 0000 00D2 // SPI disabled
                 ; 0000 00D3 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000141 b9ed      	OUT  0xD,R30
                 ; 0000 00D4 
                 ; 0000 00D5 // TWI initialization
                 ; 0000 00D6 // TWI disabled
                 ; 0000 00D7 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000142 bfe6      	OUT  0x36,R30
                 ; 0000 00D8 
                 ; 0000 00D9 // Global enable interrupts
                 ; 0000 00DA #asm("sei")
000143 9478      	sei
                 ; 0000 00DB 
                 ; 0000 00DC delay_ms(20000); // wait for SIM800 startup
000144 e2a0      	LDI  R26,LOW(20000)
000145 e4be      	LDI  R27,HIGH(20000)
000146 940e 0356 	CALL _delay_ms
                 ; 0000 00DD 
                 ; 0000 00DE printf("ATE0");
                +
000148 e7e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000149 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00014a 940e 0311 	CALL SUBOPT_0x0
                 ; 0000 00DF putchar(13);
                 ; 0000 00E0 putchar(10);
                 ; 0000 00E1 delay_ms(500); // wait for establishing connection to irancell network
                 ; 0000 00E2 
                 ; 0000 00E3 printf("AT+SAPBR=3,1,Contype,GPRS");
                +
00014c e7ed     +LDI R30 , LOW ( 2 * _0x0 + ( 5 ) )
00014d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 5 ) )
                 	__POINTW1FN _0x0,5
00014e 940e 0311 	CALL SUBOPT_0x0
                 ; 0000 00E4 putchar(13);
                 ; 0000 00E5 putchar(10);
                 ; 0000 00E6 delay_ms(500);
                 ; 0000 00E7 
                 ; 0000 00E8 printf("AT+SAPBR=3,1,APN,mtnirancell");
                +
000150 e9e7     +LDI R30 , LOW ( 2 * _0x0 + ( 31 ) )
000151 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 31 ) )
                 	__POINTW1FN _0x0,31
000152 940e 0311 	CALL SUBOPT_0x0
                 ; 0000 00E9 putchar(13);
                 ; 0000 00EA putchar(10);
                 ; 0000 00EB delay_ms(500);
                 ; 0000 00EC 
                 ; 0000 00ED printf("AT+SAPBR=1,1");
                +
000154 ebe4     +LDI R30 , LOW ( 2 * _0x0 + ( 60 ) )
000155 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 60 ) )
                 	__POINTW1FN _0x0,60
000156 940e 0321 	CALL SUBOPT_0x1
                 ; 0000 00EE putchar(13);
                 ; 0000 00EF putchar(10);
                 ; 0000 00F0 delay_ms(1000);
                 ; 0000 00F1 
                 ; 0000 00F2 printf("AT+HTTPINIT");
                +
000158 ece1     +LDI R30 , LOW ( 2 * _0x0 + ( 73 ) )
000159 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 73 ) )
                 	__POINTW1FN _0x0,73
00015a 940e 0311 	CALL SUBOPT_0x0
                 ; 0000 00F3 putchar(13);
                 ; 0000 00F4 putchar(10);
                 ; 0000 00F5 delay_ms(500);
                 ; 0000 00F6 
                 ; 0000 00F7 printf("AT+HTTPPARA=CID,1");
                +
00015c eced     +LDI R30 , LOW ( 2 * _0x0 + ( 85 ) )
00015d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 85 ) )
                 	__POINTW1FN _0x0,85
00015e 940e 0311 	CALL SUBOPT_0x0
                 ; 0000 00F8 putchar(13);
                 ; 0000 00F9 putchar(10);
                 ; 0000 00FA delay_ms(500);
                 ; 0000 00FB 
                 ; 0000 00FC PORTC.2=1; // Please delete it later!
000160 9aaa      	SBI  0x15,2
                 ; 0000 00FD 
                 ; 0000 00FE printf("AT+HTTPPARA=URL,195.182.38.151/polls/last_state");
                +
000161 edef     +LDI R30 , LOW ( 2 * _0x0 + ( 103 ) )
000162 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 103 ) )
                 	__POINTW1FN _0x0,103
000163 940e 0311 	CALL SUBOPT_0x0
                 ; 0000 00FF putchar(13);
                 ; 0000 0100 putchar(10);
                 ; 0000 0101 delay_ms(500);
                 ; 0000 0102 
                 ; 0000 0103 while (1) {
                 _0x13:
                 ; 0000 0104       if(active==1) {
000165 e0e1      	LDI  R30,LOW(1)
000166 e0f0      	LDI  R31,HIGH(1)
000167 15ec      	CP   R30,R12
000168 05fd      	CPC  R31,R13
000169 f4b1      	BRNE _0x16
                 ; 0000 0105           PORTC.2=1;
00016a 9aaa      	SBI  0x15,2
                 ; 0000 0106 
                 ; 0000 0107           if(PIR_flg == 1) {
00016b 15e8      	CP   R30,R8
00016c 05f9      	CPC  R31,R9
00016d f431      	BRNE _0x19
                 ; 0000 0108 
                 ; 0000 0109             //PORTC.1=1; // TEST LED (on)
                 ; 0000 010A 
                 ; 0000 010B               printf("ATD+989231479908;");
                +
00016e e0ef     +LDI R30 , LOW ( 2 * _0x0 + ( 151 ) )
00016f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 151 ) )
                 	__POINTW1FN _0x0,151
000170 940e 0321 	CALL SUBOPT_0x1
                 ; 0000 010C               putchar(13);
                 ; 0000 010D               putchar(10);
                 ; 0000 010E 
                 ; 0000 010F             //PORTC.0=1-PORTC.0;
                 ; 0000 0110               delay_ms(1000);
                 ; 0000 0111 
                 ; 0000 0112               PIR_flg = 0;
000172 2488      	CLR  R8
000173 2499      	CLR  R9
                 ; 0000 0113             //PORTC.1=0; // TEST LED (off)
                 ; 0000 0114           }
                 ; 0000 0115 
                 ; 0000 0116           if(magnet_flg == 1) {
                 _0x19:
000174 e0e1      	LDI  R30,LOW(1)
000175 e0f0      	LDI  R31,HIGH(1)
000176 15ea      	CP   R30,R10
000177 05fb      	CPC  R31,R11
000178 f431      	BRNE _0x1A
                 ; 0000 0117               printf("ATD+989231479908;");
                +
000179 e0ef     +LDI R30 , LOW ( 2 * _0x0 + ( 151 ) )
00017a e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 151 ) )
                 	__POINTW1FN _0x0,151
00017b 940e 0321 	CALL SUBOPT_0x1
                 ; 0000 0118               putchar(13);
                 ; 0000 0119               putchar(10);
                 ; 0000 011A 
                 ; 0000 011B               delay_ms(1000);
                 ; 0000 011C 
                 ; 0000 011D               magnet_flg = 0;
00017d 24aa      	CLR  R10
00017e 24bb      	CLR  R11
                 ; 0000 011E           }
                 ; 0000 011F 
                 ; 0000 0120       } else {
                 _0x1A:
00017f c001      	RJMP _0x1B
                 _0x16:
                 ; 0000 0121           PORTC.2=0;
000180 98aa      	CBI  0x15,2
                 ; 0000 0122       }
                 _0x1B:
                 ; 0000 0123 
                 ; 0000 0124       printf("AT+HTTPACTION=0");
                +
000181 e2e1     +LDI R30 , LOW ( 2 * _0x0 + ( 169 ) )
000182 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 169 ) )
                 	__POINTW1FN _0x0,169
000183 940e 0321 	CALL SUBOPT_0x1
                 ; 0000 0125       putchar(13);
                 ; 0000 0126       putchar(10);
                 ; 0000 0127       delay_ms(1000);
                 ; 0000 0128 
                 ; 0000 0129       printf("AT+HTTPREAD");
                +
000185 e3e1     +LDI R30 , LOW ( 2 * _0x0 + ( 185 ) )
000186 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 185 ) )
                 	__POINTW1FN _0x0,185
000187 940e 0321 	CALL SUBOPT_0x1
                 ; 0000 012A       putchar(13);
                 ; 0000 012B       putchar(10);
                 ; 0000 012C       delay_ms(1000);
                 ; 0000 012D }
000189 cfdb      	RJMP _0x13
                 ; 0000 012E }
                 _0x1E:
00018a cfff      	RJMP _0x1E
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00018b 93aa      	ST   -Y,R26
                 putchar0:
00018c 9b5d           sbis usr,udre
00018d cffe           rjmp putchar0
00018e 81e8           ld   r30,y
00018f b9ec           out  udr,r30
000190 9621      	ADIW R28,1
000191 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
000192 93ba      	ST   -Y,R27
000193 93aa      	ST   -Y,R26
000194 81aa      	LDD  R26,Y+2
000195 dff5      	RCALL _putchar
000196 81a8      	LD   R26,Y
000197 81b9      	LDD  R27,Y+1
000198 91ed      	LD   R30,X+
000199 91fd      	LD   R31,X+
00019a 9631      	ADIW R30,1
00019b 93fe      	ST   -X,R31
00019c 93ee      	ST   -X,R30
00019d 9623      	ADIW R28,3
00019e 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00019f 93ba      	ST   -Y,R27
0001a0 93aa      	ST   -Y,R26
0001a1 9726      	SBIW R28,6
0001a2 940e 0370 	CALL __SAVELOCR6
0001a4 e010      	LDI  R17,0
0001a5 85ac      	LDD  R26,Y+12
0001a6 85bd      	LDD  R27,Y+12+1
0001a7 e0e0      	LDI  R30,LOW(0)
0001a8 e0f0      	LDI  R31,HIGH(0)
0001a9 93ed      	ST   X+,R30
0001aa 93fc      	ST   X,R31
                 _0x2000016:
0001ab 89ea      	LDD  R30,Y+18
0001ac 89fb      	LDD  R31,Y+18+1
0001ad 9631      	ADIW R30,1
0001ae 8bea      	STD  Y+18,R30
0001af 8bfb      	STD  Y+18+1,R31
0001b0 9731      	SBIW R30,1
0001b1 91e4      	LPM  R30,Z
0001b2 2f2e      	MOV  R18,R30
0001b3 30e0      	CPI  R30,0
0001b4 f409      	BRNE PC+2
0001b5 c115      	RJMP _0x2000018
0001b6 2fe1      	MOV  R30,R17
0001b7 30e0      	CPI  R30,0
0001b8 f439      	BRNE _0x200001C
0001b9 3225      	CPI  R18,37
0001ba f411      	BRNE _0x200001D
0001bb e011      	LDI  R17,LOW(1)
0001bc c002      	RJMP _0x200001E
                 _0x200001D:
0001bd 940e 0331 	CALL SUBOPT_0x2
                 _0x200001E:
0001bf c10a      	RJMP _0x200001B
                 _0x200001C:
0001c0 30e1      	CPI  R30,LOW(0x1)
0001c1 f4a9      	BRNE _0x200001F
0001c2 3225      	CPI  R18,37
0001c3 f419      	BRNE _0x2000020
0001c4 940e 0331 	CALL SUBOPT_0x2
0001c6 c102      	RJMP _0x20000CC
                 _0x2000020:
0001c7 e012      	LDI  R17,LOW(2)
0001c8 e040      	LDI  R20,LOW(0)
0001c9 e000      	LDI  R16,LOW(0)
0001ca 322d      	CPI  R18,45
0001cb f411      	BRNE _0x2000021
0001cc e001      	LDI  R16,LOW(1)
0001cd c0fc      	RJMP _0x200001B
                 _0x2000021:
0001ce 322b      	CPI  R18,43
0001cf f411      	BRNE _0x2000022
0001d0 e24b      	LDI  R20,LOW(43)
0001d1 c0f8      	RJMP _0x200001B
                 _0x2000022:
0001d2 3220      	CPI  R18,32
0001d3 f411      	BRNE _0x2000023
0001d4 e240      	LDI  R20,LOW(32)
0001d5 c0f4      	RJMP _0x200001B
                 _0x2000023:
0001d6 c002      	RJMP _0x2000024
                 _0x200001F:
0001d7 30e2      	CPI  R30,LOW(0x2)
0001d8 f439      	BRNE _0x2000025
                 _0x2000024:
0001d9 e050      	LDI  R21,LOW(0)
0001da e013      	LDI  R17,LOW(3)
0001db 3320      	CPI  R18,48
0001dc f411      	BRNE _0x2000026
0001dd 6800      	ORI  R16,LOW(128)
0001de c0eb      	RJMP _0x200001B
                 _0x2000026:
0001df c003      	RJMP _0x2000027
                 _0x2000025:
0001e0 30e3      	CPI  R30,LOW(0x3)
0001e1 f009      	BREQ PC+2
0001e2 c0e7      	RJMP _0x200001B
                 _0x2000027:
0001e3 3320      	CPI  R18,48
0001e4 f010      	BRLO _0x200002A
0001e5 332a      	CPI  R18,58
0001e6 f008      	BRLO _0x200002B
                 _0x200002A:
0001e7 c007      	RJMP _0x2000029
                 _0x200002B:
0001e8 e0aa      	LDI  R26,LOW(10)
0001e9 9f5a      	MUL  R21,R26
0001ea 2d50      	MOV  R21,R0
0001eb 2fe2      	MOV  R30,R18
0001ec 53e0      	SUBI R30,LOW(48)
0001ed 0f5e      	ADD  R21,R30
0001ee c0db      	RJMP _0x200001B
                 _0x2000029:
0001ef 2fe2      	MOV  R30,R18
0001f0 36e3      	CPI  R30,LOW(0x63)
0001f1 f449      	BRNE _0x200002F
0001f2 940e 0338 	CALL SUBOPT_0x3
0001f4 89e8      	LDD  R30,Y+16
0001f5 89f9      	LDD  R31,Y+16+1
0001f6 81a4      	LDD  R26,Z+4
0001f7 93aa      	ST   -Y,R26
0001f8 940e 033e 	CALL SUBOPT_0x4
0001fa c0ce      	RJMP _0x2000030
                 _0x200002F:
0001fb 37e3      	CPI  R30,LOW(0x73)
0001fc f441      	BRNE _0x2000032
0001fd 940e 0338 	CALL SUBOPT_0x3
0001ff 940e 0344 	CALL SUBOPT_0x5
000201 940e 02f8 	CALL _strlen
000203 2f1e      	MOV  R17,R30
000204 c00a      	RJMP _0x2000033
                 _0x2000032:
000205 37e0      	CPI  R30,LOW(0x70)
000206 f461      	BRNE _0x2000035
000207 940e 0338 	CALL SUBOPT_0x3
000209 940e 0344 	CALL SUBOPT_0x5
00020b 940e 0304 	CALL _strlenf
00020d 2f1e      	MOV  R17,R30
00020e 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00020f 6002      	ORI  R16,LOW(2)
000210 770f      	ANDI R16,LOW(127)
000211 e030      	LDI  R19,LOW(0)
000212 c034      	RJMP _0x2000036
                 _0x2000035:
000213 36e4      	CPI  R30,LOW(0x64)
000214 f011      	BREQ _0x2000039
000215 36e9      	CPI  R30,LOW(0x69)
000216 f411      	BRNE _0x200003A
                 _0x2000039:
000217 6004      	ORI  R16,LOW(4)
000218 c002      	RJMP _0x200003B
                 _0x200003A:
000219 37e5      	CPI  R30,LOW(0x75)
00021a f431      	BRNE _0x200003C
                 _0x200003B:
00021b e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00021c e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00021d 83ee      	STD  Y+6,R30
00021e 83ff      	STD  Y+6+1,R31
00021f e015      	LDI  R17,LOW(5)
000220 c00c      	RJMP _0x200003D
                 _0x200003C:
000221 35e8      	CPI  R30,LOW(0x58)
000222 f411      	BRNE _0x200003F
000223 6008      	ORI  R16,LOW(8)
000224 c003      	RJMP _0x2000040
                 _0x200003F:
000225 37e8      	CPI  R30,LOW(0x78)
000226 f009      	BREQ PC+2
000227 c0a1      	RJMP _0x2000071
                 _0x2000040:
000228 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000229 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00022a 83ee      	STD  Y+6,R30
00022b 83ff      	STD  Y+6+1,R31
00022c e014      	LDI  R17,LOW(4)
                 _0x200003D:
00022d ff02      	SBRS R16,2
00022e c014      	RJMP _0x2000042
00022f 940e 0338 	CALL SUBOPT_0x3
000231 940e 034e 	CALL SUBOPT_0x6
000233 85ab      	LDD  R26,Y+11
000234 23aa      	TST  R26
000235 f43a      	BRPL _0x2000043
000236 85ea      	LDD  R30,Y+10
000237 85fb      	LDD  R31,Y+10+1
000238 940e 0364 	CALL __ANEGW1
00023a 87ea      	STD  Y+10,R30
00023b 87fb      	STD  Y+10+1,R31
00023c e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00023d 3040      	CPI  R20,0
00023e f011      	BREQ _0x2000044
00023f 5f1f      	SUBI R17,-LOW(1)
000240 c001      	RJMP _0x2000045
                 _0x2000044:
000241 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000242 c004      	RJMP _0x2000046
                 _0x2000042:
000243 940e 0338 	CALL SUBOPT_0x3
000245 940e 034e 	CALL SUBOPT_0x6
                 _0x2000046:
                 _0x2000036:
000247 fd00      	SBRC R16,0
000248 c011      	RJMP _0x2000047
                 _0x2000048:
000249 1715      	CP   R17,R21
00024a f478      	BRSH _0x200004A
00024b ff07      	SBRS R16,7
00024c c008      	RJMP _0x200004B
00024d ff02      	SBRS R16,2
00024e c004      	RJMP _0x200004C
00024f 7f0b      	ANDI R16,LOW(251)
000250 2f24      	MOV  R18,R20
000251 5011      	SUBI R17,LOW(1)
000252 c001      	RJMP _0x200004D
                 _0x200004C:
000253 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000254 c001      	RJMP _0x200004E
                 _0x200004B:
000255 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000256 940e 0331 	CALL SUBOPT_0x2
000258 5051      	SUBI R21,LOW(1)
000259 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00025a 2f31      	MOV  R19,R17
00025b ff01      	SBRS R16,1
00025c c017      	RJMP _0x200004F
                 _0x2000050:
00025d 3030      	CPI  R19,0
00025e f0a1      	BREQ _0x2000052
00025f ff03      	SBRS R16,3
000260 c006      	RJMP _0x2000053
000261 81ee      	LDD  R30,Y+6
000262 81ff      	LDD  R31,Y+6+1
000263 9125      	LPM  R18,Z+
000264 83ee      	STD  Y+6,R30
000265 83ff      	STD  Y+6+1,R31
000266 c005      	RJMP _0x2000054
                 _0x2000053:
000267 81ae      	LDD  R26,Y+6
000268 81bf      	LDD  R27,Y+6+1
000269 912d      	LD   R18,X+
00026a 83ae      	STD  Y+6,R26
00026b 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00026c 940e 0331 	CALL SUBOPT_0x2
00026e 3050      	CPI  R21,0
00026f f009      	BREQ _0x2000055
000270 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000271 5031      	SUBI R19,LOW(1)
000272 cfea      	RJMP _0x2000050
                 _0x2000052:
000273 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000274 e320      	LDI  R18,LOW(48)
000275 81ee      	LDD  R30,Y+6
000276 81ff      	LDD  R31,Y+6+1
000277 940e 036c 	CALL __GETW1PF
000279 87e8      	STD  Y+8,R30
00027a 87f9      	STD  Y+8+1,R31
00027b 81ee      	LDD  R30,Y+6
00027c 81ff      	LDD  R31,Y+6+1
00027d 9632      	ADIW R30,2
00027e 83ee      	STD  Y+6,R30
00027f 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000280 85e8      	LDD  R30,Y+8
000281 85f9      	LDD  R31,Y+8+1
000282 85aa      	LDD  R26,Y+10
000283 85bb      	LDD  R27,Y+10+1
000284 17ae      	CP   R26,R30
000285 07bf      	CPC  R27,R31
000286 f050      	BRLO _0x200005C
000287 5f2f      	SUBI R18,-LOW(1)
000288 85a8      	LDD  R26,Y+8
000289 85b9      	LDD  R27,Y+8+1
00028a 85ea      	LDD  R30,Y+10
00028b 85fb      	LDD  R31,Y+10+1
00028c 1bea      	SUB  R30,R26
00028d 0bfb      	SBC  R31,R27
00028e 87ea      	STD  Y+10,R30
00028f 87fb      	STD  Y+10+1,R31
000290 cfef      	RJMP _0x200005A
                 _0x200005C:
000291 332a      	CPI  R18,58
000292 f028      	BRLO _0x200005D
000293 ff03      	SBRS R16,3
000294 c002      	RJMP _0x200005E
000295 5f29      	SUBI R18,-LOW(7)
000296 c001      	RJMP _0x200005F
                 _0x200005E:
000297 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000298 fd04      	SBRC R16,4
000299 c01a      	RJMP _0x2000061
00029a 3321      	CPI  R18,49
00029b f420      	BRSH _0x2000063
00029c 85a8      	LDD  R26,Y+8
00029d 85b9      	LDD  R27,Y+8+1
00029e 9711      	SBIW R26,1
00029f f409      	BRNE _0x2000062
                 _0x2000063:
0002a0 c009      	RJMP _0x20000CD
                 _0x2000062:
0002a1 1753      	CP   R21,R19
0002a2 f010      	BRLO _0x2000067
0002a3 ff00      	SBRS R16,0
0002a4 c001      	RJMP _0x2000068
                 _0x2000067:
0002a5 c013      	RJMP _0x2000066
                 _0x2000068:
0002a6 e220      	LDI  R18,LOW(32)
0002a7 ff07      	SBRS R16,7
0002a8 c00b      	RJMP _0x2000069
0002a9 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0002aa 6100      	ORI  R16,LOW(16)
0002ab ff02      	SBRS R16,2
0002ac c007      	RJMP _0x200006A
0002ad 7f0b      	ANDI R16,LOW(251)
0002ae 934a      	ST   -Y,R20
0002af 940e 033e 	CALL SUBOPT_0x4
0002b1 3050      	CPI  R21,0
0002b2 f009      	BREQ _0x200006B
0002b3 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002b4 940e 0331 	CALL SUBOPT_0x2
0002b6 3050      	CPI  R21,0
0002b7 f009      	BREQ _0x200006C
0002b8 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002b9 5031      	SUBI R19,LOW(1)
0002ba 85a8      	LDD  R26,Y+8
0002bb 85b9      	LDD  R27,Y+8+1
0002bc 9712      	SBIW R26,2
0002bd f008      	BRLO _0x2000059
0002be cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002bf ff00      	SBRS R16,0
0002c0 c008      	RJMP _0x200006D
                 _0x200006E:
0002c1 3050      	CPI  R21,0
0002c2 f031      	BREQ _0x2000070
0002c3 5051      	SUBI R21,LOW(1)
0002c4 e2e0      	LDI  R30,LOW(32)
0002c5 93ea      	ST   -Y,R30
0002c6 940e 033e 	CALL SUBOPT_0x4
0002c8 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002c9 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002ca cee0      	RJMP _0x2000016
                 _0x2000018:
0002cb 85ac      	LDD  R26,Y+12
0002cc 85bd      	LDD  R27,Y+12+1
0002cd 940e 0368 	CALL __GETW1P
0002cf 940e 0377 	CALL __LOADLOCR6
0002d1 9664      	ADIW R28,20
0002d2 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0002d3 92ff      	PUSH R15
0002d4 2ef8      	MOV  R15,R24
0002d5 9726      	SBIW R28,6
0002d6 931a      	ST   -Y,R17
0002d7 930a      	ST   -Y,R16
0002d8 01de      	MOVW R26,R28
0002d9 9614      	ADIW R26,4
0002da 940e 0360 	CALL __ADDW2R15
0002dc 018d      	MOVW R16,R26
0002dd e0e0      	LDI  R30,LOW(0)
0002de 83ec      	STD  Y+4,R30
0002df 83ed      	STD  Y+4+1,R30
0002e0 83ee      	STD  Y+6,R30
0002e1 83ef      	STD  Y+6+1,R30
0002e2 01de      	MOVW R26,R28
0002e3 9618      	ADIW R26,8
0002e4 940e 0360 	CALL __ADDW2R15
0002e6 940e 0368 	CALL __GETW1P
0002e8 93fa      	ST   -Y,R31
0002e9 93ea      	ST   -Y,R30
0002ea 931a      	ST   -Y,R17
0002eb 930a      	ST   -Y,R16
0002ec e9e2      	LDI  R30,LOW(_put_usart_G100)
0002ed e0f1      	LDI  R31,HIGH(_put_usart_G100)
0002ee 93fa      	ST   -Y,R31
0002ef 93ea      	ST   -Y,R30
0002f0 01de      	MOVW R26,R28
0002f1 9618      	ADIW R26,8
0002f2 deac      	RCALL __print_G100
0002f3 8119      	LDD  R17,Y+1
0002f4 8108      	LDD  R16,Y+0
0002f5 9628      	ADIW R28,8
0002f6 90ff      	POP  R15
0002f7 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002f8 93ba      	ST   -Y,R27
0002f9 93aa      	ST   -Y,R26
0002fa 91a9          ld   r26,y+
0002fb 91b9          ld   r27,y+
0002fc 27ee          clr  r30
0002fd 27ff          clr  r31
                 strlen0:
0002fe 916d          ld   r22,x+
0002ff 2366          tst  r22
000300 f011          breq strlen1
000301 9631          adiw r30,1
000302 cffb          rjmp strlen0
                 strlen1:
000303 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000304 93ba      	ST   -Y,R27
000305 93aa      	ST   -Y,R26
000306 27aa          clr  r26
000307 27bb          clr  r27
000308 91e9          ld   r30,y+
000309 91f9          ld   r31,y+
                 strlenf0:
00030a 9005      	lpm  r0,z+
00030b 2000          tst  r0
00030c f011          breq strlenf1
00030d 9611          adiw r26,1
00030e cffb          rjmp strlenf0
                 strlenf1:
00030f 01fd          movw r30,r26
000310 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
000160           	.BYTE 0x8
                 _pre:
000168           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:67 WORDS
                 SUBOPT_0x0:
000311 93fa      	ST   -Y,R31
000312 93ea      	ST   -Y,R30
000313 e080      	LDI  R24,0
000314 940e 02d3 	CALL _printf
000316 9622      	ADIW R28,2
000317 e0ad      	LDI  R26,LOW(13)
000318 940e 018b 	CALL _putchar
00031a e0aa      	LDI  R26,LOW(10)
00031b 940e 018b 	CALL _putchar
00031d efa4      	LDI  R26,LOW(500)
00031e e0b1      	LDI  R27,HIGH(500)
00031f 940c 0356 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x1:
000321 93fa      	ST   -Y,R31
000322 93ea      	ST   -Y,R30
000323 e080      	LDI  R24,0
000324 940e 02d3 	CALL _printf
000326 9622      	ADIW R28,2
000327 e0ad      	LDI  R26,LOW(13)
000328 940e 018b 	CALL _putchar
00032a e0aa      	LDI  R26,LOW(10)
00032b 940e 018b 	CALL _putchar
00032d eea8      	LDI  R26,LOW(1000)
00032e e0b3      	LDI  R27,HIGH(1000)
00032f 940c 0356 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
000331 932a      	ST   -Y,R18
000332 85ad      	LDD  R26,Y+13
000333 85be      	LDD  R27,Y+13+1
000334 85ef      	LDD  R30,Y+15
000335 89f8      	LDD  R31,Y+15+1
000336 9509      	ICALL
000337 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000338 89e8      	LDD  R30,Y+16
000339 89f9      	LDD  R31,Y+16+1
00033a 9734      	SBIW R30,4
00033b 8be8      	STD  Y+16,R30
00033c 8bf9      	STD  Y+16+1,R31
00033d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
00033e 85ad      	LDD  R26,Y+13
00033f 85be      	LDD  R27,Y+13+1
000340 85ef      	LDD  R30,Y+15
000341 89f8      	LDD  R31,Y+15+1
000342 9509      	ICALL
000343 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
000344 89a8      	LDD  R26,Y+16
000345 89b9      	LDD  R27,Y+16+1
000346 9614      	ADIW R26,4
000347 940e 0368 	CALL __GETW1P
000349 83ee      	STD  Y+6,R30
00034a 83ff      	STD  Y+6+1,R31
00034b 81ae      	LDD  R26,Y+6
00034c 81bf      	LDD  R27,Y+6+1
00034d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00034e 89a8      	LDD  R26,Y+16
00034f 89b9      	LDD  R27,Y+16+1
000350 9614      	ADIW R26,4
000351 940e 0368 	CALL __GETW1P
000353 87ea      	STD  Y+10,R30
000354 87fb      	STD  Y+10+1,R31
000355 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000356 9610      	adiw r26,0
000357 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000358 ed80     +LDI R24 , LOW ( 0x7D0 )
000359 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00035a 9701     +SBIW R24 , 1
00035b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00035c 95a8      	wdr
00035d 9711      	sbiw r26,1
00035e f7c9      	brne __delay_ms0
                 __delay_ms1:
00035f 9508      	ret
                 
                 __ADDW2R15:
000360 2400      	CLR  R0
000361 0daf      	ADD  R26,R15
000362 1db0      	ADC  R27,R0
000363 9508      	RET
                 
                 __ANEGW1:
000364 95f1      	NEG  R31
000365 95e1      	NEG  R30
000366 40f0      	SBCI R31,0
000367 9508      	RET
                 
                 __GETW1P:
000368 91ed      	LD   R30,X+
000369 91fc      	LD   R31,X
00036a 9711      	SBIW R26,1
00036b 9508      	RET
                 
                 __GETW1PF:
00036c 9005      	LPM  R0,Z+
00036d 91f4      	LPM  R31,Z
00036e 2de0      	MOV  R30,R0
00036f 9508      	RET
                 
                 __SAVELOCR6:
000370 935a      	ST   -Y,R21
                 __SAVELOCR5:
000371 934a      	ST   -Y,R20
                 __SAVELOCR4:
000372 933a      	ST   -Y,R19
                 __SAVELOCR3:
000373 932a      	ST   -Y,R18
                 __SAVELOCR2:
000374 931a      	ST   -Y,R17
000375 930a      	ST   -Y,R16
000376 9508      	RET
                 
                 __LOADLOCR6:
000377 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000378 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000379 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00037a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00037b 8119      	LDD  R17,Y+1
00037c 8108      	LD   R16,Y
00037d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   3 r9 :   2 r10:   3 r11:   2 r12:   5 r13:   2 r14:   0 r15:   4 
r16:  37 r17:  24 r18:  27 r19:   9 r20:  10 r21:  18 r22:   4 r23:   0 
r24:  12 r25:   3 r26:  63 r27:  28 r28:  13 r29:   1 r30: 179 r31:  63 
x  :  13 y  : 136 z  :  13 
Registers used: 27 out of 35 (77.1%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :  17 and   :   0 andi  :   5 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  28 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  47 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   6 cpc   :   4 cpi   :  33 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   0 jmp   :  24 ld    :  19 ldd   :  57 ldi   : 107 
lds   :   2 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  12 movw  :  11 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   7 out   :  48 pop   :   1 push  :   1 rcall :   2 ret   :  18 
reti  :   3 rjmp  :  56 rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   2 sbic  :   0 sbis  :   1 sbiw  :  13 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  45 std   :  29 sts   :   1 sub   :   1 subi  :  13 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 52 out of 116 (44.8%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006fc   1540    248   1788   16384  10.9%
[.dseg] 0x000060 0x000169      0      9      9    1024   0.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 14 warnings
